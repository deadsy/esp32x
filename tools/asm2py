#!/usr/bin/python
# -----------------------------------------------------------------------------
"""

assembly to python

Generate a tuple of 32-bit opcode values for an assembly language routine.

32-bit buffer transfers to target memory are generally the fastest so
we generate the output in this form.

"""
# -----------------------------------------------------------------------------

import sys
import os
import subprocess
import getopt

# -----------------------------------------------------------------------------
# cross compilation tools

tool_path = '/opt/xtensa-esp32-elf/bin/'
cmd_prefix = 'xtensa-esp32-elf-'

cpp_tool = tool_path + cmd_prefix + 'cpp'
as_tool = tool_path + cmd_prefix + 'as'
gcc_tool = tool_path + cmd_prefix + 'gcc'
objcopy_tool = tool_path + cmd_prefix + 'objcopy'

# -----------------------------------------------------------------------------

asm_fname = None

# -----------------------------------------------------------------------------

def process(asm_fname):

  basename = asm_fname.split('.')[0]
  obj_fname = basename + '.o'
  elf_fname = basename + '.elf'
  bin_fname = basename + '.bin'

  # assemble the *.S file
  # cpp $< | as -o $@
  cmd = '%s %s | %s -o %s' % (cpp_tool, asm_fname, as_tool, obj_fname)
  rc = subprocess.call(cmd, shell = True)
  if rc != 0:
    return

  # link the object to resolve branch labels
  # gcc $(FLAGS) $< -o $@
  flags = '-static -nostdinc -nostartfiles -nodefaultlibs -nostdlib -ffreestanding '
  cmd = '%s %s %s -o %s' % (gcc_tool, flags, obj_fname, elf_fname)
  rc = subprocess.call(cmd, shell = True)
  if rc != 0:
    return

  # dump the text segment binary
  # objcopy -j .text $< -O binary $@
  cmd = '%s -j .text %s -O binary %s' % (objcopy_tool, elf_fname, bin_fname)
  rc = subprocess.call(cmd, shell = True)
  if rc != 0:
    return

  # get the binary data
  f = file(bin_fname, 'rb')
  x = f.read()
  f.close()

  # file cleanup
  os.remove(obj_fname)
  os.remove(elf_fname)
  os.remove(bin_fname)

  # convert to an 8-bit buffer
  buf8 = [ord(c) for c in x]

  # check length
  n = len(buf8)
  if n == 0:
    # no data
    return

  # pad with zeroes to 24 bits
  if n % 3:
    buf8.extend((0,) * (3 - (n % 3)))

  # convert to 24-bit little endian
  buf24 = [(buf8[i] << 0) | (buf8[i + 1] << 8) | (buf8[i + 2] << 16) for i in xrange(0, len(buf8), 3)]

  # output the library routine as a python dictionary
  print('%s = {' % basename)
  print("  'code': (")
  print '\n'.join(['    0x%06x,' % x for x in buf24])
  print('  ),')
  print('}')

# -----------------------------------------------------------------------------

def pr_usage():
  sys.stderr.write('Usage: %s [options] <file>\n' % sys.argv[0])

def pr_err(msg, usage = False):
  sys.stderr.write('error: %s\n' % msg)
  if usage:
    pr_usage()
  sys.exit(1)

def Process_Options(argv):
  """process command line options"""
  global asm_fname

  try:
    (opts, args) = getopt.getopt(sys.argv[1:], "")
  except getopt.GetoptError, err:
    pr_err(str(err), True)
  # process options
  for (opt, val) in opts:
    pass

  # check for a filename
  if len(args) != 1:
    pr_err('provide an input file', True)

  # check the file
  asm_fname = args[0]
  if not os.path.isfile(asm_fname):
    pr_err('file %s not found' % asm_fname)

# -----------------------------------------------------------------------------

def main():

  # check the tools
  if not os.path.isfile(gcc_tool):
    pr_err('%s not found, fix the tool path' % gcc_tool)

  Process_Options(sys.argv)
  process(asm_fname)

main()

# -----------------------------------------------------------------------------


